I do not own any of the pokemon IP sprites, 
I downloaded them from https://pokemondb.net/pokedex/charizard 
and pokemondb.net

My goal with this project was to create a program that could programatically upscale png images
for pixel art projects and other applications.
I also wanted to be able to process a large number of images with an automation instead of manual work in photoshop or some image editor requiring a whole bunch of manual work for individual images.


In order to start the server, simply use node or nodemon and run the server.js file.
Then after you locally host the index.html with the p5.js front-end code, you will be able to process
images placed in an image folder.


  // Tasks for this project

  // Write the code for upscaling the image
  // DONE!
  // Add the code to the upscaling function to add grid lines
    // DONE!
  // Save the new Image as a PNG file

    // Write code for programatically going through a list of file names in the image folder, 
    // And then it will load each of those images in in the preload function, 
    // Then it will run the upscale Image function on all of the images, 
    // Then it will export all of the NEW images as png files



    // Batch running the upscaling/grid functionality on a folder of images
    // how do I use p5.js to batch load a bunch of images?
    // I need to use a different program to save all of the image names in a list
    // I can do this with Node.js fs module or Python pathlib module
    // The script should iterate through all of the images in a given folder, and save all the image names in a list,
    // It should save this list as image-list.json or something like that, 
    // Import image-list.json into the p5.js program
    // Iterate over the list to load all of the images, give them a name, and save them in a list

    // Iterate over the list of images to upscale the images as desired



    //I also want to be able to export the data from the countAllPixelColors function, 
    // Save the data table I create showing the color and the info
    // Save the data as a json file with the RGBA values of all the pixels and their count


    // Create a table or dictionary matching the closest lego color to various rgb colors


//Improve the back-end server to be more secure and only accept info and files from specific local ports

// Think about how I could integrate the google api and google drive into the project.




- Export the pixel count data in a json file for any image I run the coutAllPixelColors() function on.
- create a table of Lego brick colors, and match a number of sprite colors to them so I can programmatically create the piece counts for mosaic kits